// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.domain.api.v0;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "com/digitalasset/canton/protocol/v0/sequencing.proto";
import "com/digitalasset/canton/v0/trace_context.proto";

// The service that a member can use to send messages to the domain and
// receive events from the domain
service SequencerService {

    // Submit a send request to the sequencer for sequencing asynchronously.
    // The rpc request may return an error if the request cannot be processed at all - see SendAsyncResponse for these scenarios.
    // The sequencer may emit a Deliver or DeliverError event from this send,
    // if the subscriber witnesses an event greater or equal to the supplied maxSequencingTime, the sequencer
    // guarantees not to publish a future Deliver event for this send.
    // The sequencer implementation may however publish a future DeliverError (typically used to indicate maxSequencingTime exceeded).
    rpc SendAsync (SubmissionRequest) returns (SendAsyncResponse);

    // Submit a send request to the sequencer for sequencing asynchronously exactly like SendAsync, except that this
    // meant to be used only by unauthenticated members for very specific operations that do not require authentication
    // such as requesting that a participant's topology data gets accepted by the topology manager
    rpc SendAsyncUnauthenticated (SubmissionRequest) returns (SendAsyncResponse);

    // Establishes a stream with the server to receive sequenced events from the domain after the given
    // counter. The delivered events will have a sequential counter and monotonically increasing timestamp.
    // TBD: Message TTL - How far back should it go when the participant initiate a subscription ?
    rpc Subscribe (SubscriptionRequest) returns (stream SubscriptionResponse);

    // Establishes a stream with the server to receive sequenced events exactly like Subscribe, except that this is
    // supposed to be used only by unauthenticated members similarly to SendAsyncUnauthenticated
    rpc SubscribeUnauthenticated (SubscriptionRequest) returns (stream SubscriptionResponse);

    // Allows a member to acknowledge that they have read all events up to and including the provided timestamp,
    // and that they will never re-read these events again. This information is currently only used for informational
    // purposes and to provide a watermark for which it is safe to prune earlier events from the sequencer data stores.
    // There is no requirement for every event to be individually acknowledged, and in fact callers are encouraged to
    // only periodically record acknowledgements (at an interval of minutes is expected to be more than sufficient for
    // pruning).
    rpc Acknowledge (AcknowledgeRequest) returns (google.protobuf.Empty);

}

message SubmissionRequest {
    string sender = 1;
    string message_id = 2;
    bool is_request = 3;
    com.digitalasset.canton.protocol.v0.CompressedBatch batch = 4;
    google.protobuf.Timestamp max_sequencing_time = 5;
    google.protobuf.Timestamp timestamp_of_signing_key = 6;
}

message SendAsyncResponse {
    Error error = 1; // Defined iff the response is an error.

    message Error {
        oneof reason {
            // The sequencer couldn't read the request (typically indicates a serialization and/or versioning bug).
            string request_invalid = 1;
            // The sequencer could read the request but refused to handle it (the request may violate a max size constraint).
            string request_refused = 2;
            // The sequencer is overloaded and does not have capacity to handle this request.
            string overloaded = 3;
            // The specified sender is not registered so the sequencer cannot guarantee publishing a Deliver event if the request can be sequenced.
            string sender_unknown = 4;
            // The sequencer is shutting down so is declining to process new requests
            string shutting_down = 5;
            // The sequencer is unavailable and can't currently process requests
            string unavailable = 6;
        }
    }
}

message SubscriptionRequest {
    string member = 1;
    // the counter indicates the next event to receive
    // e.g. requesting events from 0 will send the first event (index 0) when it exists.
    // a subscription request acts as an implicit ack for events with a lower counter value.
    int64 counter = 2;
}

message SubscriptionResponse {
    com.digitalasset.canton.protocol.v0.SignedContent signed_sequenced_event = 1;

    // optional, canton trace context
    //
    // DO NOT RENAME this field, as the ApiRequestLogger uses reflection to read this field.
    //
    // We typically use a header to transfer this information however streamed items do
    // not have per item/message headers, so we instead in this instance set it in the body.
    com.digitalasset.canton.v0.TraceContext trace_context = 2; // optional, canton trace context
}

message AcknowledgeRequest {
    // Who is the acknowledgement being sent on behalf of
    string member = 1;
    // The timestamp in sequencer time that they are acknowledging and will not re-read earlier events.
    // It is expected that the caller has a received an event with this timestamp but this is not validated.
    google.protobuf.Timestamp timestamp = 2;
}

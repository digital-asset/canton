// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package com.digitalasset.canton.protocol.v0;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "com/digitalasset/canton/crypto/v0/crypto.proto";
import "com/digitalasset/canton/protocol/v0/sequencing.proto";
import "com/digitalasset/canton/time/v0/time_proof.proto";

// Common structures with more than one member
message Informee {
    string party = 1;
    int32 weight = 2; // optional: only set if party is confirming
}

message TransferId {
    string origin_domain = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message GlobalKey {
    bytes template_id = 1;
    bytes key = 2; // TODO(oliver, #2720): change to hash string from value proto serialization which is not stable
}

message SerializableContract {
    message Metadata {
        repeated string non_maintainer_signatories = 1;
        repeated string non_signatory_stakeholders = 2;
        GlobalKey key = 3; // optional: only set if contract has a key
        repeated string maintainers = 4; // optional; only set if contract has a key
    }

    string contract_id = 1;
    bytes raw_contract_instance = 2;
    Metadata metadata = 3;
    google.protobuf.Timestamp ledger_create_time = 4;
}

message DeduplicationPeriod {
    oneof period {
        google.protobuf.Duration duration = 1;
        bytes offset = 2;
    }
}

// Messages sent by the transaction protocol

message InformeeMessage {
    FullInformeeTree full_informee_tree = 1;
}

message SignedProtocolMessage {
    com.digitalasset.canton.crypto.v0.Signature signature = 1;

    oneof some_signed_protocol_message {
        bytes mediator_response = 2;
        bytes transaction_result = 3;
        bytes malformed_mediator_request_result = 4;
        bytes transfer_result = 5;
        bytes acs_commitment = 6;
    }
}

message ParticipantRandomnessLookup {
    string participant = 1;

    // An encrypted random bytestring. After decryption, used in HKDF to derive the encryption keys for the view and
    // its subviews
    bytes randomness = 2;
}

message EncryptedViewMessage {
    bytes view_tree = 1;
    com.digitalasset.canton.crypto.v0.Signature submitter_participant_signature = 2; // optional
    bytes view_hash = 3;
    repeated ParticipantRandomnessLookup randomness = 4;
    string domain_id = 5;
    ViewType view_type = 6;
}

enum ViewType {
    MissingViewType = 0;
    TransactionViewType = 1;
    TransferOutViewType = 2;
    TransferInViewType = 3;
}

message TransferOutCommonData {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    string origin_domain = 2;
    repeated string stakeholders = 3;
    repeated string admin_parties = 4;
    string uuid = 5;
    string origin_mediator = 6;
}

message TransferOutView {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    string submitter = 2;
    string contract_id = 3;
    string target_domain = 4;
    com.digitalasset.canton.time.v0.TimeProof target_time_proof = 5;
}

message TransferViewTree {
    BlindableNode common_data = 1;
    BlindableNode participant_data = 2;
}

message TransferInCommonData {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    string target_domain = 2;
    repeated string stakeholders = 3;
    string uuid = 4;
    string target_mediator = 6;
}

message TransferInView {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    string submitter = 2;
    SerializableContract contract = 3;
    SignedContent transfer_out_result_event = 4;
    bytes creating_transaction_id = 5;
}

message TransferOutMediatorMessage {
    TransferViewTree tree = 1;
}

message TransferInMediatorMessage {
    TransferViewTree tree = 1;
}

message TransferResult {
    google.protobuf.Timestamp request_id = 1;
    oneof domain {
        string origin_domain = 2; // result for transfer out request
        string target_domain = 3; // result for transfer in request
    }
    repeated string informees = 4;
    Verdict verdict = 5;
}

message EnvelopeContent {
    oneof some_envelope_content {
        InformeeMessage informee_message = 1;
        SignedProtocolMessage signed_message = 2;
        EncryptedViewMessage encrypted_view_message = 3;
        DomainTopologyTransactionMessage domain_topology_transaction_message = 5;
        TransferOutMediatorMessage transfer_out_mediator_message = 6;
        TransferInMediatorMessage transfer_in_mediator_message = 7;
        RootHashMessage root_hash_message = 8;
        RegisterTopologyTransactionRequest register_topology_transaction_request = 9;
        RegisterTopologyTransactionResponse register_topology_transaction_response = 10;
        CausalityMessage causality_message = 11;
    }
}

message LightTransactionViewTree {
    GenTransactionTree tree = 1;
}

message InformeeTree {
    GenTransactionTree tree = 1;
}

message FullInformeeTree {
    GenTransactionTree tree = 1;
}

message GenTransactionTree {
    BlindableNode submitter_metadata = 1;
    BlindableNode common_metadata = 2;
    BlindableNode participant_metadata = 3;
    MerkleSeq root_views = 4;
}

message ViewNode {
    BlindableNode view_common_data = 1;
    BlindableNode view_participant_data = 2;
    repeated BlindableNode subviews = 3;
}

// Message allowing every node to be optionally blinded to a hash
message BlindableNode {
    oneof blinded_or_not {
        bytes unblinded = 1;
        bytes blinded_hash = 2;
    }
}

message MerkleSeq {
    BlindableNode root_or_empty = 1; // optional; absent if the sequence is empty
}

message MerkleSeqElement {
    // Fields mandatory for Branch
    BlindableNode first = 1;
    BlindableNode second = 2;

    // Fields mandatory for Singleton
    BlindableNode data = 3;
}

// Messages for leaf Canton transaction nodes
message SubmitterMetadata {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    repeated string act_as = 2;
    string application_id = 3;
    string command_id = 4;
    string submitter_participant = 5;
    string submission_id = 6; // optional; absent if not specified by submitter
    DeduplicationPeriod dedup_period = 7;
}

message CommonMetadata {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    bytes confirmation_policy = 2;
    string domain_id = 3;
    string uuid = 4;
    string mediator_id = 5;
}

message ParticipantMetadata {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    google.protobuf.Timestamp ledger_time = 2;
    google.protobuf.Timestamp submission_time = 3;
    string workflow_id = 4; // optional
}

message ViewCommonData {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    repeated Informee informees = 2;
    int32 threshold = 3;
}

message ViewParticipantData {
    com.digitalasset.canton.crypto.v0.Salt salt = 1;
    repeated InputContract core_inputs = 2;
    repeated CreatedContract created_core = 3;
    repeated string archived_from_subviews = 4; // ids of contracts created in a subview and archived in the core
    repeated ResolvedKey resolved_keys = 5;
    ActionDescription action_description = 6;
    RollbackContext rollback_context = 7; // optional; defaults to the empty RollbackContext if omitted.

    message CreatedContract {
      SerializableContract contract = 1;
      bool consumed_in_core = 2;
      bool rolled_back = 3;
    }

    message InputContract {
        SerializableContract contract = 1;
        bool consumed = 2;
    }

    message ResolvedKey {
        GlobalKey key = 1;
        oneof resolution {
            string contract_id = 2; // the key resolves to a contract
            FreeKey free = 3; // the key is free and these are the maintainers
        }
    }

    message FreeKey {
        repeated string maintainers = 1;
    }

    message RollbackContext {
        repeated int32 rollback_scope = 1;
        int32 next_child = 2;
    }
}

message ActionDescription {
    oneof description {
        CreateActionDescription create = 1;
        ExerciseActionDescription exercise = 2;
        FetchActionDescription fetch = 3;
        LookupByKeyActionDescription lookup_by_key = 4;
    }

    message CreateActionDescription {
        string contract_id = 1;
        bytes node_seed = 2;
        string version = 3;
    }

    message ExerciseActionDescription {
        string input_contract_id = 1;
        string choice = 2;
        bytes chosen_value = 3;
        repeated string actors = 4;
        bool by_key = 5;
        bytes node_seed = 6;
        string version = 7;
        bool failed = 8;
    }

    message FetchActionDescription {
        string input_contract_id = 1;
        repeated string actors = 2;
        bool by_key = 3;
        string version = 4;
    }

    message LookupByKeyActionDescription {
        GlobalKey key = 1;
        string version = 2;
    }
}

// identity management transactions
message DomainTopologyTransactionMessage {
    // signature of the domain topology manager
    com.digitalasset.canton.crypto.v0.Signature signature = 1;
    string domain_id = 2;
    /** versioned signed topology transactions serialized as byte-strings such that we can compute the signature here */
    repeated bytes transactions = 3;
}

message MediatorResponse {
    google.protobuf.Timestamp request_id = 1;
    string sender = 2;
    bytes view_hash = 3; // May be empty for Malformed verdicts if the participant cannot determine the view hash.
    LocalVerdict local_verdict = 4;
    bytes root_hash = 5; // May be empty for Malformed verdicts if the participant cannot determine the root hash.
    repeated string confirming_parties = 6; // Empty iff the verdict is malformed.
    string domain_id = 7;
}

message LocalReject {
    enum Code {
        MissingCode = 0;
        LockedContracts = 1;
        LockedKeys = 2;
        InactiveContracts = 3;
        DuplicateKey = 4;
        CreatesExistingContract = 5;
        LedgerTime = 6;
        SubmissionTime = 7;
        LocalTimeout = 8;
        MalformedPayloads = 9;
        MalformedModel = 10;
        MalformedConfirmationPolicy = 11;
        BadRootHashMessage = 12;
        TransferOutActivenessCheck = 13;
        TransferInAlreadyCompleted = 14;
        TransferInAlreadyActive = 15;
        TransferInAlreadyArchived = 16;
        TransferInLocked = 17;
        InconsistentKey = 18;
    }
    Code code = 1;
    /** human readable explanation */
    string reason = 2;
    /** affected resource */
    repeated string resource = 3;
}

message LocalVerdict {
    oneof some_local_verdict {
        google.protobuf.Empty local_approve = 1;
        LocalReject local_reject = 2;
    }
}

message Verdict {
    oneof some_verdict {
        google.protobuf.Empty approve = 1;
        RejectionReasons validator_reject = 2;
        MediatorRejection mediator_reject = 3;
        google.protobuf.Empty timeout = 4;
    };
}

message MediatorRejection {
    enum Code {
        MissingCode = 0;
        InformeesNotHostedOnActiveParticipant = 1;
        NotEnoughConfirmingParties = 2;
        ViewThresholdBelowMinimumThreshold = 3;
        InvalidRootHashMessage = 4;
        Timeout = 5;
        WrongDeclaredMediator = 6;
    }
    Code code = 1;
    string reason = 2;
}

message RejectionReasons {
    repeated RejectionReason reasons = 1;
}

message RejectionReason {
    repeated string parties = 1;
    LocalReject reject = 2;
}

message TransactionResultMessage {
    google.protobuf.Timestamp request_id = 1;
    Verdict verdict = 2;
    InformeeTree notification_tree = 5;
}

message MalformedMediatorRequestResult {
    google.protobuf.Timestamp request_id = 1;
    string domain_id = 2;
    ViewType view_type = 3;
    MediatorRejection rejection = 4;
}

// A commitment to the active contract set (ACS) that is shared between two participants on a given domain at a given time.
// Given a commitment scheme to the ACS, the semantics are as follows: the sender declares that the shared ACS was
// exactly the one committed to, at every commitment tick during the specified period and as determined by the period's
// interval. The interval is assumed to be a round number of seconds. The ticks then start at the Java EPOCH time, and
// are exactly `interval` apart.
// All fields are mandatory.
message AcsCommitment {
    string domain_id = 1;
    string sending_participant = 2;
    string counter_participant = 3;
    google.protobuf.Timestamp from_exclusive = 4;
    google.protobuf.Timestamp to_inclusive = 5;
    bytes commitment = 6;
}

message RootHashMessage {
    bytes root_hash = 1;
    string domain_id = 2;
    ViewType view_type = 3;
    bytes payload = 4; // optional
}

message RegisterTopologyTransactionRequest {
    // the member requesting the approval of the transactions on behalf of the participant.
    // typically this will be either an unauthenticated member (before the participant is active)
    // or the participant itself (after it has become active)
    string requested_by = 1;
    string participant = 2;
    string request_id = 3;
    repeated bytes signed_topology_transactions = 4;
    string domain_id = 5;
}

message RegisterTopologyTransactionResponse {
    message Result {
        enum State {
            MISSING_STATE = 0;
            // requested transaction has been stored with the domain, for the domain operator to inspect and decide
            REQUESTED = 1;
            // the request failed with an error message
            FAILED = 2;
            // the request has been automatically rejected.
            REJECTED = 3;
            // the request has been accepted by the domain topology manager
            ACCEPTED = 4;
            // the request is a duplicate (i.e. yields an topology state element that already exists)
            DUPLICATE = 5;
            // the request is obsolete (i.e. a Remove to a topology mapping that does not exist on the server)
            OBSOLETE = 6;
        }
        string unique_path = 1;
        State state = 2;
        string error_message = 3;
    }
    string requested_by = 1;
    string participant = 2;
    string request_id = 3;
    repeated Result results = 4;
    string domain_id = 5;
}
message CausalityMessage {
    string target_domain_id = 1;
    TransferId transfer_id = 2;
    VectorClock clock = 3;
}

message VectorClock {
    string origin_domain_id = 1;
    google.protobuf.Timestamp local_ts = 2;
    string party_id = 4;
    map<string, google.protobuf.Timestamp> clock = 5;
}

message CausalityUpdate {
    repeated string informeeStakeholders = 1;
    google.protobuf.Timestamp ts = 2;
    string domain_id = 3;
    int64 request_counter = 4;
    oneof tag {
        TransactionUpdate transactionUpdate = 5;
        TransferOutUpdate transferOutUpdate = 6;
        TransferInUpdate transferInUpdate = 7;
    }
}

message TransactionUpdate {
}

message TransferOutUpdate {
    TransferId transfer_id = 1;
}

message TransferInUpdate {
    TransferId transfer_id = 1;
}

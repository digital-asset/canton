// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package com.digitalasset.canton.protocol.v1;

import "com/digitalasset/canton/crypto/v0/crypto.proto";
import "com/digitalasset/canton/protocol/v0/common.proto";
import "com/digitalasset/canton/protocol/v0/participant_transaction.proto";

// Messages sent by a participant as part of the transaction protocol

// EncryptedViewMessage

message EncryptedViewMessage {
    bytes view_tree = 1;

    // The symmetric encryption scheme used to encrypt the view tree
    com.digitalasset.canton.crypto.v0.SymmetricKeyScheme encryption_scheme = 2;

    com.digitalasset.canton.crypto.v0.Signature submitter_participant_signature = 3; // optional
    bytes view_hash = 4;
    repeated ParticipantRandomnessLookup randomness = 5;
    string domain_id = 6;
    v0.ViewType view_type = 7;
}

message ParticipantRandomnessLookup {
    // An encrypted random bytestring. After decryption, used in HKDF to derive the encryption keys for the view and
    // its subviews
    bytes randomness = 1;

    // The fingerprint of the public key that was used to encrypt the randomness for the participant
    string fingerprint = 2;
}

message ViewParticipantMessage {
    // Placeholder as the protobuf format in v1 is identical to v0.
    // To avoid copy-pasting the serializer/deserializers, the Scala code reuses the v0 message.
    option deprecated = true;
}

// InformeeMessage

message InformeeMessage {
    v0.FullInformeeTree full_informee_tree = 1;
    string protocol_version = 2; // added in v1 // TODO(#9312) change to int
}

// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.participant.protocol.v0.multidomain;

import "com/digitalasset/canton/participant/protocol/v0/multidomain/transfer_command.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "Com.Digitalasset.Canton.Participant.Protocol.V0.Multidomain";
option java_outer_classname = "TransferSubmissionServiceOuterClass";
option java_package = "com.digitalasset.canton.participant.protocol.v0.multidomain";

// Allows clients to attempt advancing the ledger's state by submitting commands.
// The final states of their submissions are disclosed by the Command Completion Service.
// The on-ledger effects of their submissions are disclosed by the Update Service.
//
// Commands may fail in 2 distinct manners:
//
// 1. Failure communicated synchronously in the gRPC error of the submission.
// 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
//
// Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
// choose to produce a completion event for a rejection of a duplicate command.
//
// Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
// Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
service TransferSubmissionService {
  // Submit a single composite command.
  rpc Submit(SubmitRequest) returns (google.protobuf.Empty);
}

message SubmitRequest {
  // The transfer command to be submitted.
  // Required
  TransferCommand transfer_command = 1;
}

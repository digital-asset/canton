// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.digitalasset.canton.participant.protocol.v0.multidomain;

import "com/daml/ledger/api/v1/ledger_offset.proto";
import "com/daml/ledger/api/v1/transaction.proto";
import "com/digitalasset/canton/participant/protocol/v0/multidomain/state_service.proto";
import "com/digitalasset/canton/participant/protocol/v0/multidomain/transfer.proto";

option csharp_namespace = "Com.Digitalasset.Canton.Participant.Protocol.V0.Multidomain";
option java_outer_classname = "UpdateServiceOuterClass";
option java_package = "com.digitalasset.canton.participant.protocol.v0.multidomain";

// Allows clients to read updates (transactions and transfers) from the ledger.
service UpdateService {
  // Read the ledger's complete transaction tree stream and related transfers for a set of parties.
  rpc GetTreeUpdates(GetUpdatesRequest) returns (stream GetTreeUpdatesResponse);

  // Stream the participant ledger end. Note that intermediate ledger end updates may get dropped.
  rpc GetLedgerEnd(GetLedgerEndRequest) returns (stream GetLedgerEndResponse);
}

message GetUpdatesRequest {
  // Must correspond to the ledger ID reported by the Ledger Identification Service.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string ledger_id = 1;

  // Beginning of the requested ledger section.
  // This offset is exclusive: the response will only contain transactions whose offset is strictly greater than this.
  // Required
  com.daml.ledger.api.v1.LedgerOffset begin = 2;

  // End of the requested ledger section.
  // This offset is inclusive: the response will only contain transactions whose offset is less than or equal to this.
  // Optional, if not set, the stream will not terminate.
  com.daml.ledger.api.v1.LedgerOffset end = 3;

  // Required
  // For the multi-domain, this currently replace the usual TransactionFilter
  string party = 4;
}

message GetTreeUpdatesResponse {
  // An update that matches the filter in the request.
  oneof update {
    com.daml.ledger.api.v1.TransactionTree transaction_tree = 1;
    Transfer transfer = 2;
  }
  // The ID of the domain that sequenced the transaction resulting in this update
  string domain_id = 3;
}
